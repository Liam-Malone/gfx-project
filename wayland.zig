// THIS FILE IS AUTO-GENERATED BY Zig-Wayland-Generator
// If there are any issues... uhh well, there's nowhere to report yet, this isn't a released tool/program, I'm the only user unless someone else has copied the code out of my repo...
const std = @import("std");
const wl_msg = @import("wl_msg");
pub const Display = struct {
    name: []const u8,
    version: u32 = 1,
    pub fn sync(
        callback: u32,
    ) !void {}
    pub fn get_registry(
        registry: u32,
    ) !void {}
};
pub const Registry = struct {
    name: []const u8,
    version: u32 = 1,
    pub fn bind(
        name: u32,
        id: u32,
    ) !void {}
};
pub const Callback = struct {
    name: []const u8,
    version: u32 = 1,
};
pub const Compositor = struct {
    name: []const u8,
    version: u32 = 6,
    pub fn create_surface(
        id: u32,
    ) !void {}
    pub fn create_region(
        id: u32,
    ) !void {}
};
pub const Shm_pool = struct {
    name: []const u8,
    version: u32 = 2,
    pub fn create_buffer(
        id: u32,
        offset: i32,
        width: i32,
        height: i32,
        stride: i32,
        format: u32,
    ) !void {}
    pub fn destroy() !void {}
    pub fn resize(
        size: i32,
    ) !void {}
};
pub const Shm = struct {
    name: []const u8,
    version: u32 = 2,
    pub fn create_pool(
        id: u32,
        fd: void,
        size: i32,
    ) !void {}
    pub fn release() !void {}
};
pub const Buffer = struct {
    name: []const u8,
    version: u32 = 1,
    pub fn destroy() !void {}
};
pub const Data_offer = struct {
    name: []const u8,
    version: u32 = 3,
    pub fn accept(
        serial: u32,
        mime_type: [:0]const u8,
    ) !void {}
    pub fn receive(
        mime_type: [:0]const u8,
        fd: void,
    ) !void {}
    pub fn destroy() !void {}
    pub fn finish() !void {}
    pub fn set_actions(
        dnd_actions: u32,
        preferred_action: u32,
    ) !void {}
};
pub const Data_source = struct {
    name: []const u8,
    version: u32 = 3,
    pub fn offer(
        mime_type: [:0]const u8,
    ) !void {}
    pub fn destroy() !void {}
    pub fn set_actions(
        dnd_actions: u32,
    ) !void {}
};
pub const Data_device = struct {
    name: []const u8,
    version: u32 = 3,
    pub fn start_drag(
        source: u32,
        origin: u32,
        icon: u32,
        serial: u32,
    ) !void {}
    pub fn set_selection(
        source: u32,
        serial: u32,
    ) !void {}
    pub fn release() !void {}
};
pub const Data_device_manager = struct {
    name: []const u8,
    version: u32 = 3,
    pub fn create_data_source(
        id: u32,
    ) !void {}
    pub fn get_data_device(
        id: u32,
        seat: u32,
    ) !void {}
};
pub const Shell = struct {
    name: []const u8,
    version: u32 = 1,
    pub fn get_shell_surface(
        id: u32,
        surface: u32,
    ) !void {}
};
pub const Shell_surface = struct {
    name: []const u8,
    version: u32 = 1,
    pub fn pong(
        serial: u32,
    ) !void {}
    pub fn move(
        seat: u32,
        serial: u32,
    ) !void {}
    pub fn resize(
        seat: u32,
        serial: u32,
        edges: u32,
    ) !void {}
    pub fn set_toplevel() !void {}
    pub fn set_transient(
        parent: u32,
        x: i32,
        y: i32,
        flags: u32,
    ) !void {}
    pub fn set_fullscreen(
        method: u32,
        framerate: u32,
        output: u32,
    ) !void {}
    pub fn set_popup(
        seat: u32,
        serial: u32,
        parent: u32,
        x: i32,
        y: i32,
        flags: u32,
    ) !void {}
    pub fn set_maximized(
        output: u32,
    ) !void {}
    pub fn set_title(
        title: [:0]const u8,
    ) !void {}
    pub fn set_class(
        class_: [:0]const u8,
    ) !void {}
};
pub const Surface = struct {
    name: []const u8,
    version: u32 = 6,
    pub fn destroy() !void {}
    pub fn attach(
        buffer: u32,
        x: i32,
        y: i32,
    ) !void {}
    pub fn damage(
        x: i32,
        y: i32,
        width: i32,
        height: i32,
    ) !void {}
    pub fn frame(
        callback: u32,
    ) !void {}
    pub fn set_opaque_region(
        region: u32,
    ) !void {}
    pub fn set_input_region(
        region: u32,
    ) !void {}
    pub fn commit() !void {}
    pub fn set_buffer_transform(
        transform: i32,
    ) !void {}
    pub fn set_buffer_scale(
        scale: i32,
    ) !void {}
    pub fn damage_buffer(
        x: i32,
        y: i32,
        width: i32,
        height: i32,
    ) !void {}
    pub fn offset(
        x: i32,
        y: i32,
    ) !void {}
};
pub const Seat = struct {
    name: []const u8,
    version: u32 = 10,
    pub fn get_pointer(
        id: u32,
    ) !void {}
    pub fn get_keyboard(
        id: u32,
    ) !void {}
    pub fn get_touch(
        id: u32,
    ) !void {}
    pub fn release() !void {}
};
pub const Pointer = struct {
    name: []const u8,
    version: u32 = 10,
    pub fn set_cursor(
        serial: u32,
        surface: u32,
        hotspot_x: i32,
        hotspot_y: i32,
    ) !void {}
    pub fn release() !void {}
};
pub const Keyboard = struct {
    name: []const u8,
    version: u32 = 10,
    pub fn release() !void {}
};
pub const Touch = struct {
    name: []const u8,
    version: u32 = 10,
    pub fn release() !void {}
};
pub const Output = struct {
    name: []const u8,
    version: u32 = 4,
    pub fn release() !void {}
};
pub const Region = struct {
    name: []const u8,
    version: u32 = 1,
    pub fn destroy() !void {}
    pub fn add(
        x: i32,
        y: i32,
        width: i32,
        height: i32,
    ) !void {}
    pub fn subtract(
        x: i32,
        y: i32,
        width: i32,
        height: i32,
    ) !void {}
};
pub const Subcompositor = struct {
    name: []const u8,
    version: u32 = 1,
    pub fn destroy() !void {}
    pub fn get_subsurface(
        id: u32,
        surface: u32,
        parent: u32,
    ) !void {}
};
pub const Subsurface = struct {
    name: []const u8,
    version: u32 = 1,
    pub fn destroy() !void {}
    pub fn set_position(
        x: i32,
        y: i32,
    ) !void {}
    pub fn place_above(
        sibling: u32,
    ) !void {}
    pub fn place_below(
        sibling: u32,
    ) !void {}
    pub fn set_sync() !void {}
    pub fn set_desync() !void {}
};
