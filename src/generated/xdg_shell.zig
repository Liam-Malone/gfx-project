// WARNING: This file is auto-generated by wl-zig-bindgen.
//          It is recommended that you do NOT edit this file.
//
// TODO: Put a useful message in here when this thing is ready.
//

const std = @import("std");
const log = std.log.scoped(.@"xdg-shell");

const wl_msg = @import("wl_msg"); // It's assumed that the user provides this module

/// create desktop-style surfaces
pub const WmBase = struct {
    id: u32,
    version: u32 = 6,
    pub const Error = enum(u32) {
        /// given wl_surface has another role
        role = 0,
        /// xdg_wm_base was destroyed before children
        defunct_surfaces = 1,
        /// the client tried to map or destroy a non-topmost popup
        not_the_topmost_popup = 2,
        /// the client specified an invalid popup parent surface
        invalid_popup_parent = 3,
        /// the client provided an invalid surface state
        invalid_surface_state = 4,
        /// the client provided an invalid positioner
        invalid_positioner = 5,
        /// the client didnâ€™t respond to a ping event in time
        unresponsive = 6,
    };
    pub const destroy_params = struct {
        pub const op = 0;
    };

    /// destroy xdg_wm_base
    pub fn destroy(self: *const WmBase, writer: anytype, params: destroy_params) !void {
        log.debug("    Sending WmBase::destroy {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const create_positioner_params = struct {
        pub const op = 1;
        id: u32,
    };

    /// create a positioner object
    pub fn create_positioner(self: *const WmBase, writer: anytype, params: create_positioner_params) !void {
        log.debug("    Sending WmBase::create_positioner {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const get_xdg_surface_params = struct {
        pub const op = 2;
        id: u32,
        surface: u32,
    };

    /// create a shell surface from a surface
    pub fn get_xdg_surface(self: *const WmBase, writer: anytype, params: get_xdg_surface_params) !void {
        log.debug("    Sending WmBase::get_xdg_surface {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const pong_params = struct {
        pub const op = 3;
        /// serial of the ping event
        serial: u32,
    };

    /// respond to a ping event
    pub fn pong(self: *const WmBase, writer: anytype, params: pong_params) !void {
        log.debug("    Sending WmBase::pong {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }
    pub const Event = union(enum) {
        ping: Event.Ping,

        /// check if the client is alive
        pub const Ping = struct {
            serial: u32,
        };
        pub fn parse(op: u32, data: []const u8) !Event {
            return switch (op) {
                0 => .{ .ping = try wl_msg.parse_data(Event.Ping, data) },
                else => {
                    log.warn("Unknown wm_base event: {d}", .{op});
                    return error.UnknownEvent;
                },
            };
        }
    };
};

/// child surface positioner
pub const Positioner = struct {
    id: u32,
    version: u32 = 6,
    pub const Error = enum(u32) {
        /// invalid input provided
        invalid_input = 0,
    };
    pub const Anchor = enum(u32) {
        none = 0,
        top = 1,
        bottom = 2,
        left = 3,
        right = 4,
        top_left = 5,
        bottom_left = 6,
        top_right = 7,
        bottom_right = 8,
    };
    pub const Gravity = enum(u32) {
        none = 0,
        top = 1,
        bottom = 2,
        left = 3,
        right = 4,
        top_left = 5,
        bottom_left = 6,
        top_right = 7,
        bottom_right = 8,
    };
    /// constraint adjustments
    pub const ConstraintAdjustment = enum(u32) {
        none = 0,
        slide_x = 1,
        slide_y = 2,
        flip_x = 4,
        flip_y = 8,
        resize_x = 16,
        resize_y = 32,
    };
    pub const destroy_params = struct {
        pub const op = 0;
    };

    /// destroy the xdg_positioner object
    pub fn destroy(self: *const Positioner, writer: anytype, params: destroy_params) !void {
        log.debug("    Sending Positioner::destroy {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const set_size_params = struct {
        pub const op = 1;
        /// width of positioned rectangle
        width: i32,
        /// height of positioned rectangle
        height: i32,
    };

    /// set the size of the to-be positioned rectangle
    pub fn set_size(self: *const Positioner, writer: anytype, params: set_size_params) !void {
        log.debug("    Sending Positioner::set_size {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const set_anchor_rect_params = struct {
        pub const op = 2;
        /// x position of anchor rectangle
        x: i32,
        /// y position of anchor rectangle
        y: i32,
        /// width of anchor rectangle
        width: i32,
        /// height of anchor rectangle
        height: i32,
    };

    /// set the anchor rectangle within the parent surface
    pub fn set_anchor_rect(self: *const Positioner, writer: anytype, params: set_anchor_rect_params) !void {
        log.debug("    Sending Positioner::set_anchor_rect {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const set_anchor_params = struct {
        pub const op = 3;
        /// anchor
        anchor: Anchor,
    };

    /// set anchor rectangle anchor
    pub fn set_anchor(self: *const Positioner, writer: anytype, params: set_anchor_params) !void {
        log.debug("    Sending Positioner::set_anchor {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const set_gravity_params = struct {
        pub const op = 4;
        /// gravity direction
        gravity: Gravity,
    };

    /// set child surface gravity
    pub fn set_gravity(self: *const Positioner, writer: anytype, params: set_gravity_params) !void {
        log.debug("    Sending Positioner::set_gravity {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const set_constraint_adjustment_params = struct {
        pub const op = 5;
        /// bit mask of constraint adjustments
        constraint_adjustment: ConstraintAdjustment,
    };

    /// set the adjustment to be done when constrained
    pub fn set_constraint_adjustment(self: *const Positioner, writer: anytype, params: set_constraint_adjustment_params) !void {
        log.debug("    Sending Positioner::set_constraint_adjustment {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const set_offset_params = struct {
        pub const op = 6;
        /// surface position x offset
        x: i32,
        /// surface position y offset
        y: i32,
    };

    /// set surface position offset
    pub fn set_offset(self: *const Positioner, writer: anytype, params: set_offset_params) !void {
        log.debug("    Sending Positioner::set_offset {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const set_reactive_params = struct {
        pub const op = 7;
    };

    /// continuously reconstrain the surface
    pub fn set_reactive(self: *const Positioner, writer: anytype, params: set_reactive_params) !void {
        log.debug("    Sending Positioner::set_reactive {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const set_parent_size_params = struct {
        pub const op = 8;
        /// future window geometry width of parent
        parent_width: i32,
        /// future window geometry height of parent
        parent_height: i32,
    };

    ///
    pub fn set_parent_size(self: *const Positioner, writer: anytype, params: set_parent_size_params) !void {
        log.debug("    Sending Positioner::set_parent_size {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const set_parent_configure_params = struct {
        pub const op = 9;
        /// serial of parent configure event
        serial: u32,
    };

    /// set parent configure this is a response to
    pub fn set_parent_configure(self: *const Positioner, writer: anytype, params: set_parent_configure_params) !void {
        log.debug("    Sending Positioner::set_parent_configure {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }
};

/// desktop user interface surface base interface
pub const Surface = struct {
    id: u32,
    version: u32 = 6,
    pub const Error = enum(u32) {
        /// Surface was not fully constructed
        not_constructed = 1,
        /// Surface was already constructed
        already_constructed = 2,
        /// Attaching a buffer to an unconfigured surface
        unconfigured_buffer = 3,
        /// Invalid serial number when acking a configure event
        invalid_serial = 4,
        /// Width or height was zero or negative
        invalid_size = 5,
        /// Surface was destroyed before its role object
        defunct_role_object = 6,
    };
    pub const destroy_params = struct {
        pub const op = 0;
    };

    /// destroy the xdg_surface
    pub fn destroy(self: *const Surface, writer: anytype, params: destroy_params) !void {
        log.debug("    Sending Surface::destroy {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const get_toplevel_params = struct {
        pub const op = 1;
        id: u32,
    };

    /// assign the xdg_toplevel surface role
    pub fn get_toplevel(self: *const Surface, writer: anytype, params: get_toplevel_params) !void {
        log.debug("    Sending Surface::get_toplevel {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const get_popup_params = struct {
        pub const op = 2;
        id: u32,
        parent: u32,
        positioner: u32,
    };

    /// assign the xdg_popup surface role
    pub fn get_popup(self: *const Surface, writer: anytype, params: get_popup_params) !void {
        log.debug("    Sending Surface::get_popup {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const set_window_geometry_params = struct {
        pub const op = 3;
        x: i32,
        y: i32,
        width: i32,
        height: i32,
    };

    /// set the new window geometry
    pub fn set_window_geometry(self: *const Surface, writer: anytype, params: set_window_geometry_params) !void {
        log.debug("    Sending Surface::set_window_geometry {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const ack_configure_params = struct {
        pub const op = 4;
        /// the serial from the configure event
        serial: u32,
    };

    /// ack a configure event
    pub fn ack_configure(self: *const Surface, writer: anytype, params: ack_configure_params) !void {
        log.debug("    Sending Surface::ack_configure {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }
    pub const Event = union(enum) {
        configure: Event.Configure,

        /// suggest a surface change
        pub const Configure = struct {
            serial: u32,
        };
        pub fn parse(op: u32, data: []const u8) !Event {
            return switch (op) {
                0 => .{ .configure = try wl_msg.parse_data(Event.Configure, data) },
                else => {
                    log.warn("Unknown surface event: {d}", .{op});
                    return error.UnknownEvent;
                },
            };
        }
    };
};

/// toplevel surface
pub const Toplevel = struct {
    id: u32,
    version: u32 = 6,
    pub const Error = enum(u32) {
        /// provided value is not a valid variant of the resize_edge enum
        invalid_resize_edge = 0,
        /// invalid parent toplevel
        invalid_parent = 1,
        /// client provided an invalid min or max size
        invalid_size = 2,
    };
    /// edge values for resizing
    pub const ResizeEdge = enum(u32) {
        none = 0,
        top = 1,
        bottom = 2,
        left = 4,
        top_left = 5,
        bottom_left = 6,
        right = 8,
        top_right = 9,
        bottom_right = 10,
    };
    /// types of state on the surface
    pub const State = enum(u32) {
        /// the surface is maximized
        maximized = 1,
        /// the surface is fullscreen
        fullscreen = 2,
        /// the surface is being resized
        resizing = 3,
        /// the surface is now activated
        activated = 4,
        tiled_left = 5,
        tiled_right = 6,
        tiled_top = 7,
        tiled_bottom = 8,
        suspended = 9,
    };
    pub const WmCapabilities = enum(u32) {
        /// show_window_menu is available
        window_menu = 1,
        /// set_maximized and unset_maximized are available
        maximize = 2,
        /// set_fullscreen and unset_fullscreen are available
        fullscreen = 3,
        /// set_minimized is available
        minimize = 4,
    };
    pub const destroy_params = struct {
        pub const op = 0;
    };

    /// destroy the xdg_toplevel
    pub fn destroy(self: *const Toplevel, writer: anytype, params: destroy_params) !void {
        log.debug("    Sending Toplevel::destroy {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const set_parent_params = struct {
        pub const op = 1;
        parent: u32,
    };

    /// set the parent of this surface
    pub fn set_parent(self: *const Toplevel, writer: anytype, params: set_parent_params) !void {
        log.debug("    Sending Toplevel::set_parent {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const set_title_params = struct {
        pub const op = 2;
        title: [:0]const u8,
    };

    /// set surface title
    pub fn set_title(self: *const Toplevel, writer: anytype, params: set_title_params) !void {
        log.debug("    Sending Toplevel::set_title {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const set_app_id_params = struct {
        pub const op = 3;
        app_id: [:0]const u8,
    };

    /// set application ID
    pub fn set_app_id(self: *const Toplevel, writer: anytype, params: set_app_id_params) !void {
        log.debug("    Sending Toplevel::set_app_id {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const show_window_menu_params = struct {
        pub const op = 4;
        /// the wl_seat of the user event
        seat: u32,
        /// the serial of the user event
        serial: u32,
        /// the x position to pop up the window menu at
        x: i32,
        /// the y position to pop up the window menu at
        y: i32,
    };

    /// show the window menu
    pub fn show_window_menu(self: *const Toplevel, writer: anytype, params: show_window_menu_params) !void {
        log.debug("    Sending Toplevel::show_window_menu {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const move_params = struct {
        pub const op = 5;
        /// the wl_seat of the user event
        seat: u32,
        /// the serial of the user event
        serial: u32,
    };

    /// start an interactive move
    pub fn move(self: *const Toplevel, writer: anytype, params: move_params) !void {
        log.debug("    Sending Toplevel::move {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const resize_params = struct {
        pub const op = 6;
        /// the wl_seat of the user event
        seat: u32,
        /// the serial of the user event
        serial: u32,
        /// which edge or corner is being dragged
        edges: ResizeEdge,
    };

    /// start an interactive resize
    pub fn resize(self: *const Toplevel, writer: anytype, params: resize_params) !void {
        log.debug("    Sending Toplevel::resize {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const set_max_size_params = struct {
        pub const op = 7;
        width: i32,
        height: i32,
    };

    /// set the maximum size
    pub fn set_max_size(self: *const Toplevel, writer: anytype, params: set_max_size_params) !void {
        log.debug("    Sending Toplevel::set_max_size {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const set_min_size_params = struct {
        pub const op = 8;
        width: i32,
        height: i32,
    };

    /// set the minimum size
    pub fn set_min_size(self: *const Toplevel, writer: anytype, params: set_min_size_params) !void {
        log.debug("    Sending Toplevel::set_min_size {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const set_maximized_params = struct {
        pub const op = 9;
    };

    /// maximize the window
    pub fn set_maximized(self: *const Toplevel, writer: anytype, params: set_maximized_params) !void {
        log.debug("    Sending Toplevel::set_maximized {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const unset_maximized_params = struct {
        pub const op = 10;
    };

    /// unmaximize the window
    pub fn unset_maximized(self: *const Toplevel, writer: anytype, params: unset_maximized_params) !void {
        log.debug("    Sending Toplevel::unset_maximized {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const set_fullscreen_params = struct {
        pub const op = 11;
        output: u32,
    };

    /// set the window as fullscreen on an output
    pub fn set_fullscreen(self: *const Toplevel, writer: anytype, params: set_fullscreen_params) !void {
        log.debug("    Sending Toplevel::set_fullscreen {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const unset_fullscreen_params = struct {
        pub const op = 12;
    };

    /// unset the window as fullscreen
    pub fn unset_fullscreen(self: *const Toplevel, writer: anytype, params: unset_fullscreen_params) !void {
        log.debug("    Sending Toplevel::unset_fullscreen {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const set_minimized_params = struct {
        pub const op = 13;
    };

    /// set the window as minimized
    pub fn set_minimized(self: *const Toplevel, writer: anytype, params: set_minimized_params) !void {
        log.debug("    Sending Toplevel::set_minimized {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }
    pub const Event = union(enum) {
        configure: Event.Configure,
        close: Event.Close,
        configure_bounds: Event.ConfigureBounds,
        wm_capabilities: Event.WmCapabilities,

        /// suggest a surface change
        pub const Configure = struct {
            width: i32,
            height: i32,
            states: []const u8,
        };

        /// surface wants to be closed
        pub const Close = struct {};

        /// recommended window geometry bounds
        pub const ConfigureBounds = struct {
            width: i32,
            height: i32,
        };

        /// compositor capabilities
        pub const WmCapabilities = struct {
            capabilities: []const u8,
        };
        pub fn parse(op: u32, data: []const u8) !Event {
            return switch (op) {
                0 => .{ .configure = try wl_msg.parse_data(Event.Configure, data) },
                1 => .{ .close = try wl_msg.parse_data(Event.Close, data) },
                2 => .{ .configure_bounds = try wl_msg.parse_data(Event.ConfigureBounds, data) },
                3 => .{ .wm_capabilities = try wl_msg.parse_data(Event.WmCapabilities, data) },
                else => {
                    log.warn("Unknown toplevel event: {d}", .{op});
                    return error.UnknownEvent;
                },
            };
        }
    };
};

/// short-lived, popup surfaces for menus
pub const Popup = struct {
    id: u32,
    version: u32 = 6,
    pub const Error = enum(u32) {
        /// tried to grab after being mapped
        invalid_grab = 0,
    };
    pub const destroy_params = struct {
        pub const op = 0;
    };

    /// remove xdg_popup interface
    pub fn destroy(self: *const Popup, writer: anytype, params: destroy_params) !void {
        log.debug("    Sending Popup::destroy {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const grab_params = struct {
        pub const op = 1;
        /// the wl_seat of the user event
        seat: u32,
        /// the serial of the user event
        serial: u32,
    };

    /// make the popup take an explicit grab
    pub fn grab(self: *const Popup, writer: anytype, params: grab_params) !void {
        log.debug("    Sending Popup::grab {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }

    pub const reposition_params = struct {
        pub const op = 2;
        positioner: u32,
        /// reposition request token
        token: u32,
    };

    /// recalculate the popup's location
    pub fn reposition(self: *const Popup, writer: anytype, params: reposition_params) !void {
        log.debug("    Sending Popup::reposition {any}", .{params});
        try wl_msg.write(writer, @TypeOf(params), params, self.id);
    }
    pub const Event = union(enum) {
        configure: Event.Configure,
        popup_done: Event.PopupDone,
        repositioned: Event.Repositioned,

        /// configure the popup surface
        pub const Configure = struct {
            x: i32,
            y: i32,
            width: i32,
            height: i32,
        };

        /// popup interaction is done
        pub const PopupDone = struct {};

        /// signal the completion of a repositioned request
        pub const Repositioned = struct {
            token: u32,
        };
        pub fn parse(op: u32, data: []const u8) !Event {
            return switch (op) {
                0 => .{ .configure = try wl_msg.parse_data(Event.Configure, data) },
                1 => .{ .popup_done = try wl_msg.parse_data(Event.PopupDone, data) },
                2 => .{ .repositioned = try wl_msg.parse_data(Event.Repositioned, data) },
                else => {
                    log.warn("Unknown popup event: {d}", .{op});
                    return error.UnknownEvent;
                },
            };
        }
    };
};
